<?php

require_once('Swat/SwatObject.php');
require_once('Swat/SwatMessage.php');

/**
 * Base class for all widgets
 *
 * @package Swat
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 * @copyright silverorange 2004
 */
abstract class SwatWidget extends SwatObject {

	/**
	 * The widget which contains this widget
	 *
	 * @var SwatContainer
	 */
	public $parent = null;

	/**
	 * A non-visible unique id for this widget, or null
	 *
	 * @var string
	 */
	public $id;

	/**
	 * Visible
	 *
	 * Whether the widget is displayed. Not all widgets respect this (yet).
	 *
	 * @var boolean
	 */
	public $visible = true;

	protected $messages = array();

	/**
	 * @param string $id A non-visible unique id for this widget.
	 */
	function __construct($id = null) {
		$this->id = $id;

		$this->init();
	}

	/**
	 * Generate auto id
	 *
	 * Sets the id property of this widget to an autogenerated id
	 * if the id has not been explicitly set.
	 */
	protected function generateAutoId() {

		static $counter = 0;

		if ($this->id !== null) return;
		$this->id = get_class($this).$counter;

		$counter++;
	}

	/**
	 * Display the widget
	 *
	 * The widget displays itself as well as recursively displays any child 
	 * widgets.
	 */
	abstract public function display();

	/**
	 * Display the widget with tidy HTML
	 *
	 * this::display() is called and the output is cleaned up.
	 */
	public function displayTidy() {
		ob_start();
		$this->display();
		$buffer = ob_get_clean();
		$tidy = ereg_replace("</?(div|p|table|td|tr|ul|li|ol|dl)[^<>]*>", "\n\\0\n", $buffer);
		$tidy = ereg_replace("\n\n", "\n", $tidy);
		echo $tidy;
	}

	/**
	 * Process the widget
	 *
	 * After a form submit, the widget processes itself as well as recursively
	 * processes any child widgets.
	 */
	public function process() {
	}

	/**
	 * Initialize the widget
	 *
	 * Run by the widget constructor.
	 */
	public function init() {
	}

	/**
	 * Add a message
	 *
	 * Adds a new error message to this widget. The error will be shown by the
	 * display() method as well as cause hasMessage() to return true.
	 *
	 * @param SwatMessage {@link SwatMessage} object to add
	 */
	abstract public function addMessage($msg);

	/**
	 * Gather error messages
	 *
	 * Gather all messages from children of this widget and this widget 
	 * itself.
	 *
	 * @return array Array of {@link SwatMessage} objects.
	 */
	abstract public function gatherMessages();

	/**
	 * Check for messages
	 *
	 * @return boolean True if there is an message in the subtree.
	 */
	abstract public function hasMessage();
}

?>
